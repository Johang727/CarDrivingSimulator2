{
    "monitors": [
        {
            "id": "h%n^+kU(e~P_[yJ#EaZN",
            "mode": "list",
            "opcode": "data_listcontents",
            "params": {
                "LIST": "currentEngine"
            },
            "spriteName": null,
            "value": [],
            "width": 389,
            "height": 282,
            "x": 0,
            "y": 0,
            "visible": false
        },
        {
            "id": ":(!D{KR@b|H27oUZ-Zm[",
            "mode": "large",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "acceleration"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 338,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "6o/e|^Ys~lf9+e^/0ob+",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "pedalForce"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 156,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "AtK?8fP(S+g,]Z/QcP%[",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "currentGear"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 24,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "Vzjd)2CSdy?c:q1Ty;?e",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "breakForce"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 124,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "mgB}o`RFiC2t`9:8_zc!",
            "mode": "large",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "RPM"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 480,
            "y": 326,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "|19$zzLlGyRE}kQj=oCs",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "engineON"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 211,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "{_%hq3)sbZe2J)w?U9RU",
            "mode": "large",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "velocity"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 5,
            "y": 338,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "z_LC.2=%Oca`4QZP-zDZ",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "odometer"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 370,
            "y": 88,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": ";Q-@{07#GCmh0?@8C%l|",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "currentlyShifting"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 9,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "8sDV__W9_c9[gA,uukB8",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "auto"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 55,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "j=ye9.Kh0q}VT67:r~jb",
            "mode": "large",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "fuel"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 51,
            "y": 258,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "4.a6us1XXC*fp=-hP^_^",
            "mode": "large",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "health"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 369,
            "y": 260,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "GUCnwPhw{52pUxwz-rK.",
            "mode": "list",
            "opcode": "data_listcontents",
            "params": {
                "LIST": "wrn_list"
            },
            "spriteName": null,
            "value": [],
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 5,
            "visible": false
        },
        {
            "id": ".Kk(WHDpY4}ffDyn)vVW",
            "mode": "list",
            "opcode": "data_listcontents",
            "params": {
                "LIST": "seasons"
            },
            "spriteName": null,
            "value": [],
            "width": 113,
            "height": 346,
            "x": 75,
            "y": 5,
            "visible": false
        },
        {
            "id": "d2s#ctpcZD+cfn-@yp],",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "temperature"
            },
            "spriteName": "weatherHandler",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 5,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "-Q[iqy4u}1l3:n)@q!=j",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "temp"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 32,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": ";j10DIR6LjAta!xD9fw]",
            "mode": "list",
            "opcode": "data_listcontents",
            "params": {
                "LIST": "time"
            },
            "spriteName": null,
            "value": [],
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 59,
            "visible": false
        },
        {
            "id": "5Fh6%t`/e7Gakn|J,93W",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "blinker"
            },
            "spriteName": "lights//blinkers",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 59,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "7t3fZtjbo3Tl])s{/wD,",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "data"
            },
            "spriteName": "onScreenHint",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 5,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "kGI_*!JQiGVRywumbdCG",
            "mode": "list",
            "opcode": "data_listcontents",
            "params": {
                "LIST": "carPositions"
            },
            "spriteName": null,
            "value": [],
            "width": 161,
            "height": 289,
            "x": 0,
            "y": 5,
            "visible": false
        },
        {
            "id": "hvVzwkX/4*/,:FoUzzME",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "fuelMax"
            },
            "spriteName": "engine",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 5,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "@:p~D5@aQz=WdMC##Oa-",
            "mode": "default",
            "opcode": "data_variable",
            "params": {
                "VARIABLE": "info"
            },
            "spriteName": "menu//settings",
            "value": 0,
            "width": 0,
            "height": 0,
            "x": 0,
            "y": 5,
            "visible": false,
            "sliderMin": 0,
            "sliderMax": 100,
            "isDiscrete": true
        },
        {
            "id": "xpzO]xDO@=pC~R4+J}Qk",
            "mode": "list",
            "opcode": "data_listcontents",
            "params": {
                "LIST": "inventory"
            },
            "spriteName": null,
            "value": [],
            "width": 0,
            "height": 0,
            "x": 460,
            "y": 0,
            "visible": false
        }
    ],
    "extensions": [
        "DTcameracontrols",
        "localstorage",
        "lmscomments",
        "runtimeoptions",
        "lmsTimers",
        "lmsMoreEvents",
        "lmsTempVars2",
        "lmsAssets",
        "strings",
        "nonameawacomparisons",
        "lmsutilsblocks",
        "lmsSoundExpanded",
        "lmsSpAsMoreControl",
        "truefantomcouplers",
        "qxsckvarandlist",
        "Gamepad",
        "lmsclonesplus",
        "lmsLooksPlus",
        "jeremygamerTweening",
        "text",
        "lmsData",
        "obviousalexsensing",
        "truefantomnetwork",
        "SPASfontManager",
        "files",
        "verctedictionaries",
        "theshovelcanvaseffects",
        "dtbyxeroname",
        "qxsckdataanalysis",
        "cubesterWindowControls"
    ],
    "extensionURLs": {
        "DTcameracontrols": "https://extensions.turbowarp.org/DT/cameracontrols.js",
        "localstorage": "https://extensions.turbowarp.org/local-storage.js",
        "lmscomments": "https://extensions.turbowarp.org/Lily/CommentBlocks.js",
        "runtimeoptions": "https://extensions.turbowarp.org/runtime-options.js",
        "lmsTimers": "https://extensions.turbowarp.org/Lily/MoreTimers.js",
        "lmsMoreEvents": "https://extensions.turbowarp.org/Lily/MoreEvents.js",
        "lmsTempVars2": "https://extensions.turbowarp.org/Lily/TempVariables2.js",
        "lmsAssets": "https://extensions.turbowarp.org/Lily/Assets.js",
        "strings": "https://extensions.turbowarp.org/text.js",
        "nonameawacomparisons": "https://extensions.turbowarp.org/NOname-awa/more-comparisons.js",
        "lmsutilsblocks": "https://extensions.turbowarp.org/Lily/lmsutils.js",
        "lmsSoundExpanded": "https://extensions.turbowarp.org/Lily/SoundExpanded.js",
        "lmsSpAsMoreControl": "data:text/javascript;base64,",
        "truefantomcouplers": "https://extensions.turbowarp.org/true-fantom/couplers.js",
        "qxsckvarandlist": "https://extensions.turbowarp.org/qxsck/var-and-list.js",
        "Gamepad": "https://extensions.turbowarp.org/gamepad.js",
        "lmsclonesplus": "https://extensions.turbowarp.org/Lily/ClonesPlus.js",
        "lmsLooksPlus": "https://extensions.turbowarp.org/Lily/LooksPlus.js",
        "jeremygamerTweening": "https://extensions.turbowarp.org/JeremyGamer13/tween.js",
        "text": "https://extensions.turbowarp.org/lab/text.js",
        "lmsData": "https://extensions.turbowarp.org/Lily/ListTools.js",
        "obviousalexsensing": "https://extensions.turbowarp.org/obviousAlexC/SensingPlus.js",
        "truefantomnetwork": "https://extensions.turbowarp.org/true-fantom/network.js",
        "SPASfontManager": "https://extensions.turbowarp.org/SharkPool/Font-Manager.js",
        "files": "https://extensions.turbowarp.org/files.js",
        "verctedictionaries": "https://extensions.turbowarp.org/vercte/dictionaries.js",
        "theshovelcanvaseffects": "https://extensions.turbowarp.org/TheShovel/CanvasEffects.js",
        "dtbyxeroname": "https://extensions.turbowarp.org/XeroName/Deltatime.js",
        "qxsckdataanalysis": "https://extensions.turbowarp.org/qxsck/data-analysis.js",
        "cubesterWindowControls": "https://extensions.turbowarp.org/CubesterYT/WindowControls.js"
    },
    "customFonts": [
        {
            "system": true,
            "family": "Cascadia Mono",
            "fallback": "Sans Serif"
        },
        {
            "system": true,
            "family": "DynaPuff",
            "fallback": "Pixel"
        }
    ],
    "meta": {
        "semver": "3.0.0",
        "vm": "0.2.0",
        "agent": "",
        "platform": {
            "name": "TurboWarp",
            "url": "https://turbowarp.org/"
        }
    },
    "targets": []
}